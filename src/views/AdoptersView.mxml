<?xml version="1.0" encoding="utf-8"?>
<!--
The Matterhorn2Go Project
Copyright (C) 2011  University of Osnabrück; Part of the Opencast Matterhorn Project

This project is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 
USA 
-->
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		title="Matterhorn Endpoints"
		backgroundColor="#F2F2F2" 
		xmlns:views="views.*" 
		xmlns:business="business.*"
		tabBarVisible="false"
		creationComplete="init()">

	<fx:Script>
		<![CDATA[
			import business.ConfigurationReader;
			import business.datahandler.AdoptersDataHandler;
			import business.datahandler.EpisodesDataHandler;
			import business.datahandler.SeriesDataHandler;
			import business.datahandler.XMLHandler;
			
			import events.AdoptersLoadedEvent;
			import events.NotConnectedEvent;
			import events.VideosLoadedEvent;
			
			import flash.events.Event;
			
			import mx.collections.XMLListCollection;
			import mx.core.UIComponent;
			import mx.events.ResizeEvent;
			
			[Bindable]
			public var adoptersList:XMLListCollection;
			
			private var height_window:int;
			
			private var adopters:AdoptersDataHandler;
			
			private var dH:EpisodesDataHandler;
			
			public function init():void
			{
				list.visible = true;
				
				this.navigator.addEventListener(ResizeEvent.RESIZE, setSize);
				
				connection.visible = false;

				//var	xpathValue:XMLHandler = new XMLHandler();
				
				adopters = AdoptersDataHandler.getInstance();
				adopters.init();
				adopters.addEventListener(AdoptersLoadedEvent.ADOPTERSLOADED, getAdopters);
				adopters.addEventListener(NotConnectedEvent.NOTCONNECTED, notConnected);
			}
			
			public function getAdopters(event:AdoptersLoadedEvent):void
			{
				//adoptersList = adopters.getXMLListAdopters();
				//trace("list loadet")
				list.dataProvider = adopters.getXMLListAdopters();

			}
			
			public function notConnected(event:NotConnectedEvent):void 
			{
				list.visible = false;
				connection.visible = true;
			}
			
			protected function popThisView():void
			{
				this.navigator.removeEventListener(ResizeEvent.RESIZE, setSize);
				adopters.removeEventListener(AdoptersLoadedEvent.ADOPTERSLOADED, getAdopters);
				adopters.removeEventListener(NotConnectedEvent.NOTCONNECTED, notConnected);
				navigator.popView();
				list.visible = true;
				connection.visible = false;
			}
			
			public function loadAdopter():void
			{
				//trace()
				var selectedItem:Object = list.selectedItem;
				
				var fileReader:ConfigurationReader = ConfigurationReader.getInstance();
				
				fileReader.setURL(selectedItem.AdopterURL, false);
				adopters.init();
				dH = EpisodesDataHandler.getInstance();
				dH.initLoadOK();
				dH.setOValue();
								
				var sDH:SeriesDataHandler = SeriesDataHandler.getInstance();
				sDH.initLoadOK();
				sDH.initThumbnailOK();
				sDH.setOValue();
			} 
			
			public function setSize(event:ResizeEvent):void
			{	
			}
			
			public function editAdopter():void
			{
				this.navigator.removeEventListener(ResizeEvent.RESIZE, setSize);
				
				navigator.pushView(ConfigurationView, adoptersList);	
			}
			
			public function addAdopter():void
			{				
				this.navigator.removeEventListener(ResizeEvent.RESIZE, setSize);
				navigator.pushView(AddLocalAdopterView, data);	
			}
			
			public function useAdopter():void
			{
				navigator.popView();
			}
			
		]]>
	</fx:Script>
	
	<s:actionContent>
		<s:Button id="back_button" 
				  height="53"
				  width="60"
				  click="popThisView();">
			<s:icon>
				<s:MultiDPIBitmapSource source160dpi="assets/BackIcon40x40.png"
										source240dpi="assets/BackIcon64x64.png"
										source320dpi="assets/BackIcon88x88.png"/>
			</s:icon>
		</s:Button>
	</s:actionContent>
	
	<s:View backgroundColor="#F2F2F2" >
		<s:Group>	
			<s:View id="connection" visible="false"
					backgroundColor="#861B1D" 
					fontFamily="_sans" 
					alpha="0.9" 
					x="{navigator.width / 2 - 122.5}" y="{navigator.height / 2 - 70}">
				<s:Group width="250" height="80">
					<s:Label text="It seems like that you´ve lost " 
							 x="10" y = "14" 
							 fontFamily="_sans" 
							 color="white"/>
					<s:Label text="your Internet connection. Sorry" 
							 x="10" y = "32" 
							 fontFamily="_sans" 
							 color="white"/>
					<s:Label text="Information cannot be displayed." 
							 x="10" y = "50" 
							 fontFamily="_sans" 
							 color="white"/>
				</s:Group>
			</s:View>
		</s:Group>
		
		<s:VGroup height="{this.height}">
			<s:List id="list"
					height="100%" 
					width="100%"
					labelField="fontName"
					itemRenderer="business.renderers.AdoptersRenderer" 
					change="loadAdopter()"/>
			
			<s:View id="add_url_button"
					backgroundColor="#BDBDBD" 
					fontFamily="_sans" 
					x="0" 
					y="{this.navigator.height - 130}">
				
				<s:Group height="45" width="{this.navigator.width}">
					<s:Button id="add_button" width="70" 
							  height="30" 
							  y="7"
							  x="{navigator.width / 2 - 155}"
							  label="add" 
							  click="addAdopter();">
					</s:Button>	
					
					<s:Button id="delete_button" width="70" 
							  height="30" 
							  y="7"
							  x="{navigator.width / 2 - 75}"
							  label="delete" 
							  click="">
					</s:Button>	
					
					<s:Button id="edit_button" width="70" 
							  height="30" 
							  y="7"
							  x="{navigator.width / 2 + 5}"
							  label="edit" 
							  click="editAdopter();">
					</s:Button>	
					
					<s:Button id="use_button" width="70"
							  height="30" 
							  y="7"
							  x="{navigator.width / 2 + 85}"
							  label="use" 
							  click="useAdopter();">
					</s:Button>	
					
				</s:Group>
			</s:View>
		</s:VGroup>
	</s:View>
</s:View>